I"K<h2 id="hooks-additional-api">Hooks Additional API</h2>

<p><br />
React는 기본적인 Hook 이외에도 <code class="language-plaintext highlighter-rouge">useReducer</code>, <code class="language-plaintext highlighter-rouge">useCallback</code>, <code class="language-plaintext highlighter-rouge">useMemo</code>, <code class="language-plaintext highlighter-rouge">useRef</code> 등 여러가지 Hook 들이 있다.
<br /><br /><br /></p>

<h3 id="usereducer">useReducer</h3>

<ul>
  <li>useState의 대체 함수입니다.</li>
  <li>(state, action) =&gt; newState의 형태로 reducer를 받고 dispatch 메서드와 짝의 형태로 현재 state를 반환합니다.</li>
  <li>다수의 하윗값을 포함하는 복잡한 정적 로직을 만드는 경우나 다음 state가 이전 state에 의존적인 경우에 많이 사용 되어진다.
<br /><br /></li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">[</span><span class="nx">state</span><span class="p">,</span> <span class="nx">dispatch</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useReducer</span><span class="p">(</span><span class="nx">reducer</span><span class="p">,</span> <span class="nx">initialArg</span><span class="p">,</span> <span class="nx">init</span><span class="p">);</span>
</code></pre></div></div>

<p><br /><br /></p>

<h3 id="usecallback">useCallback</h3>

<ul>
  <li>첫 번째 인자로는 콜백 함수, 두 번째 인자는 의존성 배열을 전달</li>
  <li>의존성 배열의 값이 하나라도 바뀔 경우 새로운 함수를 반환</li>
  <li>컴포넌트의 불필요한 렌더링을 방지하기 위해 사용<br /><br /></li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">memoizedCallback</span> <span class="o">=</span> <span class="nx">useCallback</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">doSomething</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">);</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">]);</span>
</code></pre></div></div>

<p><br /><br /></p>

<h3 id="usememo">useMemo</h3>

<ul>
  <li>메모이제이션된 값을 반환한다.</li>
  <li>동일한 계산을 반복할 때 이전에 계산한 값을 기억해서 반복 계산을 제거</li>
  <li>첫 번째 인자로 실행될 함수를 전달한다.</li>
  <li>두 번째 인자로 의존성 배열을 전달한다.</li>
  <li>배열 요소 중 값이 하나라도 바뀌면 첫 번째 인자로 전달된 함수가 재계산된다.<br /><br /></li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">memoizedValue</span> <span class="o">=</span> <span class="nx">useMemo</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">computeExpensiveValue</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">),</span> <span class="p">[</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">]);</span>
</code></pre></div></div>

<p><br /><br /></p>

<h3 id="useref">useRef</h3>

<ul>
  <li>javascript의 document.getElementById()처럼 사용 할 수 있습니다.</li>
  <li>DOM을 선택하는 용도 외에도 컴포넌트 안에서 조회 및 수정 할 수 있는 변수를 관리하는 용도로도 사용됩니다.</li>
  <li>useRef 로 관리하는 변수는 값이 바뀐다고 해서 컴포넌트가 리렌더링 되지 않습니다.
<br /><br /></li>
</ul>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useRef</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">example</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">nameInput</span> <span class="o">=</span> <span class="nx">useRef</span><span class="p">();</span>

  <span class="k">return</span> <span class="p">&lt;</span><span class="nt">input</span> <span class="na">name</span><span class="p">=</span><span class="s">"name"</span> <span class="na">value</span><span class="p">=</span><span class="si">{</span><span class="nx">text</span><span class="si">}</span> <span class="na">ref</span><span class="p">=</span><span class="si">{</span><span class="nx">nameInput</span><span class="si">}</span> <span class="p">/&gt;;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>
:ET